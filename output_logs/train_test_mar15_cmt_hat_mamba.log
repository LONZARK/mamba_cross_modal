CUDA extension for cauchy multiplication not found. Install by going to extensions/cauchy/ and running `python setup.py install`. This should speed up end-to-end training by 10-50%
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/modules/transformer.py:282: UserWarning: enable_nested_tensor is True, but self.use_nested_tensor is False because encoder_layer.self_attn.batch_first was not True(use batch_first for better inference performance)
  warnings.warn(f"enable_nested_tensor is True, but self.use_nested_tensor is False because {why_not_sparsity_fast_path}")
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
Train Epoch: 1 [0/10000 (0%)]	Loss: 2.276825
Train Epoch: 1 [800/10000 (8%)]	Loss: 0.729064
Train Epoch: 1 [1600/10000 (16%)]	Loss: 0.758398
Train Epoch: 1 [2400/10000 (24%)]	Loss: 0.613097
Train Epoch: 1 [3200/10000 (32%)]	Loss: 0.581863
Train Epoch: 1 [4000/10000 (40%)]	Loss: 0.439424
Train Epoch: 1 [4800/10000 (48%)]	Loss: 0.428744
Train Epoch: 1 [5600/10000 (56%)]	Loss: 0.381766
Train Epoch: 1 [6400/10000 (64%)]	Loss: 0.541261
Train Epoch: 1 [7200/10000 (72%)]	Loss: 0.443073
Train Epoch: 1 [8000/10000 (80%)]	Loss: 0.426885
Train Epoch: 1 [8800/10000 (88%)]	Loss: 0.408480
Train Epoch: 1 [9600/10000 (96%)]	Loss: 0.529233
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 44.6
Visual Event Detection Segment-level F1: 30.8
Audio-Visual Event Detection Segment-level F1: 30.9
Segment-levelType@Avg. F1: 35.4
Segment-level Event@Avg. F1: 37.6
Audio Event Detection Event-level F1: 37.7
Visual Event Detection Event-level F1: 27.4
Audio-Visual Event Detection Event-level F1: 27.0
Event-level Type@Avg. F1: 30.7
Event-level Event@Avg. F1: 32.3
Train Epoch: 2 [0/10000 (0%)]	Loss: 0.400762
Train Epoch: 2 [800/10000 (8%)]	Loss: 0.496038
Train Epoch: 2 [1600/10000 (16%)]	Loss: 0.415579
Train Epoch: 2 [2400/10000 (24%)]	Loss: 0.405845
Train Epoch: 2 [3200/10000 (32%)]	Loss: 0.362730
Train Epoch: 2 [4000/10000 (40%)]	Loss: 0.433749
Train Epoch: 2 [4800/10000 (48%)]	Loss: 0.436856
Train Epoch: 2 [5600/10000 (56%)]	Loss: 0.359938
Train Epoch: 2 [6400/10000 (64%)]	Loss: 0.517123
Train Epoch: 2 [7200/10000 (72%)]	Loss: 0.358650
Train Epoch: 2 [8000/10000 (80%)]	Loss: 0.370772
Train Epoch: 2 [8800/10000 (88%)]	Loss: 0.406179
Train Epoch: 2 [9600/10000 (96%)]	Loss: 0.518690
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 55.2
Visual Event Detection Segment-level F1: 49.1
Audio-Visual Event Detection Segment-level F1: 45.6
Segment-levelType@Avg. F1: 50.0
Segment-level Event@Avg. F1: 51.1
Audio Event Detection Event-level F1: 47.5
Visual Event Detection Event-level F1: 46.0
Audio-Visual Event Detection Event-level F1: 40.3
Event-level Type@Avg. F1: 44.6
Event-level Event@Avg. F1: 44.8
Train Epoch: 3 [0/10000 (0%)]	Loss: 0.323119
Train Epoch: 3 [800/10000 (8%)]	Loss: 0.439020
Train Epoch: 3 [1600/10000 (16%)]	Loss: 0.316528
Train Epoch: 3 [2400/10000 (24%)]	Loss: 0.351465
Train Epoch: 3 [3200/10000 (32%)]	Loss: 0.365393
Train Epoch: 3 [4000/10000 (40%)]	Loss: 0.338524
Train Epoch: 3 [4800/10000 (48%)]	Loss: 0.361975
Train Epoch: 3 [5600/10000 (56%)]	Loss: 0.387328
Train Epoch: 3 [6400/10000 (64%)]	Loss: 0.333376
Train Epoch: 3 [7200/10000 (72%)]	Loss: 0.347475
Train Epoch: 3 [8000/10000 (80%)]	Loss: 0.304299
Train Epoch: 3 [8800/10000 (88%)]	Loss: 0.327045
Train Epoch: 3 [9600/10000 (96%)]	Loss: 0.402253
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 53.4
Visual Event Detection Segment-level F1: 45.0
Audio-Visual Event Detection Segment-level F1: 41.7
Segment-levelType@Avg. F1: 46.7
Segment-level Event@Avg. F1: 48.7
Audio Event Detection Event-level F1: 44.7
Visual Event Detection Event-level F1: 41.4
Audio-Visual Event Detection Event-level F1: 36.0
Event-level Type@Avg. F1: 40.7
Event-level Event@Avg. F1: 41.7
Train Epoch: 4 [0/10000 (0%)]	Loss: 0.356661
Train Epoch: 4 [800/10000 (8%)]	Loss: 0.415519
Train Epoch: 4 [1600/10000 (16%)]	Loss: 0.438212
Train Epoch: 4 [2400/10000 (24%)]	Loss: 0.334187
Train Epoch: 4 [3200/10000 (32%)]	Loss: 0.367097
Train Epoch: 4 [4000/10000 (40%)]	Loss: 0.287289
Train Epoch: 4 [4800/10000 (48%)]	Loss: 0.324014
Train Epoch: 4 [5600/10000 (56%)]	Loss: 0.319218
Train Epoch: 4 [6400/10000 (64%)]	Loss: 0.295843
Train Epoch: 4 [7200/10000 (72%)]	Loss: 0.372342
Train Epoch: 4 [8000/10000 (80%)]	Loss: 0.373557
Train Epoch: 4 [8800/10000 (88%)]	Loss: 0.329031
Train Epoch: 4 [9600/10000 (96%)]	Loss: 0.453260
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 55.0
Visual Event Detection Segment-level F1: 49.3
Audio-Visual Event Detection Segment-level F1: 46.0
Segment-levelType@Avg. F1: 50.1
Segment-level Event@Avg. F1: 50.8
Audio Event Detection Event-level F1: 47.6
Visual Event Detection Event-level F1: 46.3
Audio-Visual Event Detection Event-level F1: 40.7
Event-level Type@Avg. F1: 44.9
Event-level Event@Avg. F1: 44.8
Train Epoch: 5 [0/10000 (0%)]	Loss: 0.300250
Train Epoch: 5 [800/10000 (8%)]	Loss: 0.297425
Train Epoch: 5 [1600/10000 (16%)]	Loss: 0.279002
Train Epoch: 5 [2400/10000 (24%)]	Loss: 0.408740
Train Epoch: 5 [3200/10000 (32%)]	Loss: 0.307440
Train Epoch: 5 [4000/10000 (40%)]	Loss: 0.352944
Train Epoch: 5 [4800/10000 (48%)]	Loss: 0.338513
Train Epoch: 5 [5600/10000 (56%)]	Loss: 0.360925
Train Epoch: 5 [6400/10000 (64%)]	Loss: 0.431332
Train Epoch: 5 [7200/10000 (72%)]	Loss: 0.370222
Train Epoch: 5 [8000/10000 (80%)]	Loss: 0.352504
Train Epoch: 5 [8800/10000 (88%)]	Loss: 0.292008
Train Epoch: 5 [9600/10000 (96%)]	Loss: 0.346440
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 55.1
Visual Event Detection Segment-level F1: 50.1
Audio-Visual Event Detection Segment-level F1: 48.0
Segment-levelType@Avg. F1: 51.1
Segment-level Event@Avg. F1: 51.1
Audio Event Detection Event-level F1: 47.2
Visual Event Detection Event-level F1: 46.3
Audio-Visual Event Detection Event-level F1: 41.7
Event-level Type@Avg. F1: 45.0
Event-level Event@Avg. F1: 44.4
Train Epoch: 6 [0/10000 (0%)]	Loss: 0.361384
Train Epoch: 6 [800/10000 (8%)]	Loss: 0.308731
Train Epoch: 6 [1600/10000 (16%)]	Loss: 0.295473
Train Epoch: 6 [2400/10000 (24%)]	Loss: 0.335387
Train Epoch: 6 [3200/10000 (32%)]	Loss: 0.341783
Train Epoch: 6 [4000/10000 (40%)]	Loss: 0.395253
Train Epoch: 6 [4800/10000 (48%)]	Loss: 0.381809
Train Epoch: 6 [5600/10000 (56%)]	Loss: 0.294734
Train Epoch: 6 [6400/10000 (64%)]	Loss: 0.375778
Train Epoch: 6 [7200/10000 (72%)]	Loss: 0.279760
Train Epoch: 6 [8000/10000 (80%)]	Loss: 0.398350
Train Epoch: 6 [8800/10000 (88%)]	Loss: 0.367839
Train Epoch: 6 [9600/10000 (96%)]	Loss: 0.441162
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 55.7
Visual Event Detection Segment-level F1: 52.5
Audio-Visual Event Detection Segment-level F1: 48.8
Segment-levelType@Avg. F1: 52.3
Segment-level Event@Avg. F1: 52.3
Audio Event Detection Event-level F1: 48.0
Visual Event Detection Event-level F1: 48.8
Audio-Visual Event Detection Event-level F1: 42.6
Event-level Type@Avg. F1: 46.5
Event-level Event@Avg. F1: 45.9
Train Epoch: 7 [0/10000 (0%)]	Loss: 0.313416
Train Epoch: 7 [800/10000 (8%)]	Loss: 0.338557
Train Epoch: 7 [1600/10000 (16%)]	Loss: 0.301048
Train Epoch: 7 [2400/10000 (24%)]	Loss: 0.363370
Train Epoch: 7 [3200/10000 (32%)]	Loss: 0.302099
Train Epoch: 7 [4000/10000 (40%)]	Loss: 0.308346
Train Epoch: 7 [4800/10000 (48%)]	Loss: 0.417376
Train Epoch: 7 [5600/10000 (56%)]	Loss: 0.338147
Train Epoch: 7 [6400/10000 (64%)]	Loss: 0.334623
Train Epoch: 7 [7200/10000 (72%)]	Loss: 0.286371
Train Epoch: 7 [8000/10000 (80%)]	Loss: 0.298631
Train Epoch: 7 [8800/10000 (88%)]	Loss: 0.405395
Train Epoch: 7 [9600/10000 (96%)]	Loss: 0.309442
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 53.7
Visual Event Detection Segment-level F1: 53.7
Audio-Visual Event Detection Segment-level F1: 49.1
Segment-levelType@Avg. F1: 52.2
Segment-level Event@Avg. F1: 50.6
Audio Event Detection Event-level F1: 46.2
Visual Event Detection Event-level F1: 50.3
Audio-Visual Event Detection Event-level F1: 42.9
Event-level Type@Avg. F1: 46.5
Event-level Event@Avg. F1: 44.3
Train Epoch: 8 [0/10000 (0%)]	Loss: 0.340260
Train Epoch: 8 [800/10000 (8%)]	Loss: 0.262517
Train Epoch: 8 [1600/10000 (16%)]	Loss: 0.340285
Train Epoch: 8 [2400/10000 (24%)]	Loss: 0.313980
Train Epoch: 8 [3200/10000 (32%)]	Loss: 0.342399
Train Epoch: 8 [4000/10000 (40%)]	Loss: 0.285310
Train Epoch: 8 [4800/10000 (48%)]	Loss: 0.340249
Train Epoch: 8 [5600/10000 (56%)]	Loss: 0.427185
Train Epoch: 8 [6400/10000 (64%)]	Loss: 0.358449
Train Epoch: 8 [7200/10000 (72%)]	Loss: 0.343274
Train Epoch: 8 [8000/10000 (80%)]	Loss: 0.360941
Train Epoch: 8 [8800/10000 (88%)]	Loss: 0.374733
Train Epoch: 8 [9600/10000 (96%)]	Loss: 0.264751
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 52.8
Visual Event Detection Segment-level F1: 56.4
Audio-Visual Event Detection Segment-level F1: 51.1
Segment-levelType@Avg. F1: 53.4
Segment-level Event@Avg. F1: 50.5
Audio Event Detection Event-level F1: 46.1
Visual Event Detection Event-level F1: 52.9
Audio-Visual Event Detection Event-level F1: 44.8
Event-level Type@Avg. F1: 47.9
Event-level Event@Avg. F1: 44.8
Train Epoch: 9 [0/10000 (0%)]	Loss: 0.319023
Train Epoch: 9 [800/10000 (8%)]	Loss: 0.293800
Train Epoch: 9 [1600/10000 (16%)]	Loss: 0.295569
Train Epoch: 9 [2400/10000 (24%)]	Loss: 0.316480
Train Epoch: 9 [3200/10000 (32%)]	Loss: 0.378573
Train Epoch: 9 [4000/10000 (40%)]	Loss: 0.427995
Train Epoch: 9 [4800/10000 (48%)]	Loss: 0.469649
Train Epoch: 9 [5600/10000 (56%)]	Loss: 0.318477
Train Epoch: 9 [6400/10000 (64%)]	Loss: 0.344128
Train Epoch: 9 [7200/10000 (72%)]	Loss: 0.355516
Train Epoch: 9 [8000/10000 (80%)]	Loss: 0.306987
Train Epoch: 9 [8800/10000 (88%)]	Loss: 0.335351
Train Epoch: 9 [9600/10000 (96%)]	Loss: 0.360115
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 53.6
Visual Event Detection Segment-level F1: 49.7
Audio-Visual Event Detection Segment-level F1: 45.2
Segment-levelType@Avg. F1: 49.5
Segment-level Event@Avg. F1: 50.1
Audio Event Detection Event-level F1: 45.4
Visual Event Detection Event-level F1: 46.2
Audio-Visual Event Detection Event-level F1: 39.2
Event-level Type@Avg. F1: 43.6
Event-level Event@Avg. F1: 43.5
Train Epoch: 10 [0/10000 (0%)]	Loss: 0.440390
Train Epoch: 10 [800/10000 (8%)]	Loss: 0.351567
Train Epoch: 10 [1600/10000 (16%)]	Loss: 0.389527
Train Epoch: 10 [2400/10000 (24%)]	Loss: 0.285728
Train Epoch: 10 [3200/10000 (32%)]	Loss: 0.316580
Train Epoch: 10 [4000/10000 (40%)]	Loss: 0.323124
Train Epoch: 10 [4800/10000 (48%)]	Loss: 0.365823
Train Epoch: 10 [5600/10000 (56%)]	Loss: 0.353360
Train Epoch: 10 [6400/10000 (64%)]	Loss: 0.373019
Train Epoch: 10 [7200/10000 (72%)]	Loss: 0.296361
Train Epoch: 10 [8000/10000 (80%)]	Loss: 0.383698
Train Epoch: 10 [8800/10000 (88%)]	Loss: 0.293220
Train Epoch: 10 [9600/10000 (96%)]	Loss: 0.339861
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 57.5
Visual Event Detection Segment-level F1: 48.4
Audio-Visual Event Detection Segment-level F1: 44.2
Segment-levelType@Avg. F1: 50.1
Segment-level Event@Avg. F1: 52.8
Audio Event Detection Event-level F1: 48.6
Visual Event Detection Event-level F1: 44.7
Audio-Visual Event Detection Event-level F1: 38.2
Event-level Type@Avg. F1: 43.8
Event-level Event@Avg. F1: 45.7
Train Epoch: 11 [0/10000 (0%)]	Loss: 0.295050
Train Epoch: 11 [800/10000 (8%)]	Loss: 0.304633
Train Epoch: 11 [1600/10000 (16%)]	Loss: 0.342093
Train Epoch: 11 [2400/10000 (24%)]	Loss: 0.265958
Train Epoch: 11 [3200/10000 (32%)]	Loss: 0.338775
Train Epoch: 11 [4000/10000 (40%)]	Loss: 0.318704
Train Epoch: 11 [4800/10000 (48%)]	Loss: 0.354885
Train Epoch: 11 [5600/10000 (56%)]	Loss: 0.312759
Train Epoch: 11 [6400/10000 (64%)]	Loss: 0.273792
Train Epoch: 11 [7200/10000 (72%)]	Loss: 0.269192
Train Epoch: 11 [8000/10000 (80%)]	Loss: 0.292561
Train Epoch: 11 [8800/10000 (88%)]	Loss: 0.276593
Train Epoch: 11 [9600/10000 (96%)]	Loss: 0.279728
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.5
Visual Event Detection Segment-level F1: 53.2
Audio-Visual Event Detection Segment-level F1: 48.6
Segment-levelType@Avg. F1: 54.1
Segment-level Event@Avg. F1: 56.0
Audio Event Detection Event-level F1: 51.1
Visual Event Detection Event-level F1: 49.2
Audio-Visual Event Detection Event-level F1: 41.9
Event-level Type@Avg. F1: 47.4
Event-level Event@Avg. F1: 48.4
Train Epoch: 12 [0/10000 (0%)]	Loss: 0.344121
Train Epoch: 12 [800/10000 (8%)]	Loss: 0.303963
Train Epoch: 12 [1600/10000 (16%)]	Loss: 0.253145
Train Epoch: 12 [2400/10000 (24%)]	Loss: 0.264417
Train Epoch: 12 [3200/10000 (32%)]	Loss: 0.344068
Train Epoch: 12 [4000/10000 (40%)]	Loss: 0.329229
Train Epoch: 12 [4800/10000 (48%)]	Loss: 0.318916
Train Epoch: 12 [5600/10000 (56%)]	Loss: 0.279377
Train Epoch: 12 [6400/10000 (64%)]	Loss: 0.325874
Train Epoch: 12 [7200/10000 (72%)]	Loss: 0.304308
Train Epoch: 12 [8000/10000 (80%)]	Loss: 0.308627
Train Epoch: 12 [8800/10000 (88%)]	Loss: 0.330611
Train Epoch: 12 [9600/10000 (96%)]	Loss: 0.270850
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.1
Visual Event Detection Segment-level F1: 54.5
Audio-Visual Event Detection Segment-level F1: 50.0
Segment-levelType@Avg. F1: 54.9
Segment-level Event@Avg. F1: 55.9
Audio Event Detection Event-level F1: 51.1
Visual Event Detection Event-level F1: 50.5
Audio-Visual Event Detection Event-level F1: 43.3
Event-level Type@Avg. F1: 48.3
Event-level Event@Avg. F1: 48.6
Train Epoch: 13 [0/10000 (0%)]	Loss: 0.272723
Train Epoch: 13 [800/10000 (8%)]	Loss: 0.251971
Train Epoch: 13 [1600/10000 (16%)]	Loss: 0.377697
Train Epoch: 13 [2400/10000 (24%)]	Loss: 0.260357
Train Epoch: 13 [3200/10000 (32%)]	Loss: 0.263217
Train Epoch: 13 [4000/10000 (40%)]	Loss: 0.258161
Train Epoch: 13 [4800/10000 (48%)]	Loss: 0.365855
Train Epoch: 13 [5600/10000 (56%)]	Loss: 0.259455
Train Epoch: 13 [6400/10000 (64%)]	Loss: 0.268256
Train Epoch: 13 [7200/10000 (72%)]	Loss: 0.312441
Train Epoch: 13 [8000/10000 (80%)]	Loss: 0.368255
Train Epoch: 13 [8800/10000 (88%)]	Loss: 0.389092
Train Epoch: 13 [9600/10000 (96%)]	Loss: 0.379186
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.9
Visual Event Detection Segment-level F1: 53.6
Audio-Visual Event Detection Segment-level F1: 49.1
Segment-levelType@Avg. F1: 54.5
Segment-level Event@Avg. F1: 56.5
Audio Event Detection Event-level F1: 51.5
Visual Event Detection Event-level F1: 49.7
Audio-Visual Event Detection Event-level F1: 42.6
Event-level Type@Avg. F1: 47.9
Event-level Event@Avg. F1: 49.0
Train Epoch: 14 [0/10000 (0%)]	Loss: 0.286709
Train Epoch: 14 [800/10000 (8%)]	Loss: 0.250145
Train Epoch: 14 [1600/10000 (16%)]	Loss: 0.272250
Train Epoch: 14 [2400/10000 (24%)]	Loss: 0.303836
Train Epoch: 14 [3200/10000 (32%)]	Loss: 0.307036
Train Epoch: 14 [4000/10000 (40%)]	Loss: 0.333979
Train Epoch: 14 [4800/10000 (48%)]	Loss: 0.317883
Train Epoch: 14 [5600/10000 (56%)]	Loss: 0.312379
Train Epoch: 14 [6400/10000 (64%)]	Loss: 0.246828
Train Epoch: 14 [7200/10000 (72%)]	Loss: 0.248408
Train Epoch: 14 [8000/10000 (80%)]	Loss: 0.283289
Train Epoch: 14 [8800/10000 (88%)]	Loss: 0.273761
Train Epoch: 14 [9600/10000 (96%)]	Loss: 0.292254
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.7
Visual Event Detection Segment-level F1: 53.8
Audio-Visual Event Detection Segment-level F1: 49.1
Segment-levelType@Avg. F1: 54.5
Segment-level Event@Avg. F1: 56.5
Audio Event Detection Event-level F1: 51.4
Visual Event Detection Event-level F1: 50.0
Audio-Visual Event Detection Event-level F1: 42.5
Event-level Type@Avg. F1: 47.9
Event-level Event@Avg. F1: 49.0
Train Epoch: 15 [0/10000 (0%)]	Loss: 0.292381
Train Epoch: 15 [800/10000 (8%)]	Loss: 0.270914
Train Epoch: 15 [1600/10000 (16%)]	Loss: 0.279349
Train Epoch: 15 [2400/10000 (24%)]	Loss: 0.304164
Train Epoch: 15 [3200/10000 (32%)]	Loss: 0.344962
Train Epoch: 15 [4000/10000 (40%)]	Loss: 0.297161
Train Epoch: 15 [4800/10000 (48%)]	Loss: 0.314647
Train Epoch: 15 [5600/10000 (56%)]	Loss: 0.275809
Train Epoch: 15 [6400/10000 (64%)]	Loss: 0.368668
Train Epoch: 15 [7200/10000 (72%)]	Loss: 0.309032
Train Epoch: 15 [8000/10000 (80%)]	Loss: 0.256487
Train Epoch: 15 [8800/10000 (88%)]	Loss: 0.269949
Train Epoch: 15 [9600/10000 (96%)]	Loss: 0.344253
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.6
Visual Event Detection Segment-level F1: 53.0
Audio-Visual Event Detection Segment-level F1: 48.6
Segment-levelType@Avg. F1: 54.1
Segment-level Event@Avg. F1: 56.2
Audio Event Detection Event-level F1: 51.1
Visual Event Detection Event-level F1: 49.3
Audio-Visual Event Detection Event-level F1: 42.2
Event-level Type@Avg. F1: 47.5
Event-level Event@Avg. F1: 48.7
Train Epoch: 16 [0/10000 (0%)]	Loss: 0.302976
Train Epoch: 16 [800/10000 (8%)]	Loss: 0.236345
Train Epoch: 16 [1600/10000 (16%)]	Loss: 0.240040
Train Epoch: 16 [2400/10000 (24%)]	Loss: 0.280707
Train Epoch: 16 [3200/10000 (32%)]	Loss: 0.261631
Train Epoch: 16 [4000/10000 (40%)]	Loss: 0.258026
Train Epoch: 16 [4800/10000 (48%)]	Loss: 0.302685
Train Epoch: 16 [5600/10000 (56%)]	Loss: 0.248013
Train Epoch: 16 [6400/10000 (64%)]	Loss: 0.262114
Train Epoch: 16 [7200/10000 (72%)]	Loss: 0.259513
Train Epoch: 16 [8000/10000 (80%)]	Loss: 0.264717
Train Epoch: 16 [8800/10000 (88%)]	Loss: 0.286829
Train Epoch: 16 [9600/10000 (96%)]	Loss: 0.247192
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 61.1
Visual Event Detection Segment-level F1: 53.2
Audio-Visual Event Detection Segment-level F1: 48.4
Segment-levelType@Avg. F1: 54.2
Segment-level Event@Avg. F1: 56.7
Audio Event Detection Event-level F1: 51.5
Visual Event Detection Event-level F1: 49.4
Audio-Visual Event Detection Event-level F1: 41.6
Event-level Type@Avg. F1: 47.5
Event-level Event@Avg. F1: 48.9
Train Epoch: 17 [0/10000 (0%)]	Loss: 0.285165
Train Epoch: 17 [800/10000 (8%)]	Loss: 0.264535
Train Epoch: 17 [1600/10000 (16%)]	Loss: 0.294922
Train Epoch: 17 [2400/10000 (24%)]	Loss: 0.312425
Train Epoch: 17 [3200/10000 (32%)]	Loss: 0.320879
Train Epoch: 17 [4000/10000 (40%)]	Loss: 0.310857
Train Epoch: 17 [4800/10000 (48%)]	Loss: 0.244536
Train Epoch: 17 [5600/10000 (56%)]	Loss: 0.252853
Train Epoch: 17 [6400/10000 (64%)]	Loss: 0.225945
Train Epoch: 17 [7200/10000 (72%)]	Loss: 0.262213
Train Epoch: 17 [8000/10000 (80%)]	Loss: 0.289387
Train Epoch: 17 [8800/10000 (88%)]	Loss: 0.274996
Train Epoch: 17 [9600/10000 (96%)]	Loss: 0.316322
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.8
Visual Event Detection Segment-level F1: 53.0
Audio-Visual Event Detection Segment-level F1: 47.8
Segment-levelType@Avg. F1: 53.9
Segment-level Event@Avg. F1: 56.5
Audio Event Detection Event-level F1: 51.2
Visual Event Detection Event-level F1: 49.1
Audio-Visual Event Detection Event-level F1: 41.2
Event-level Type@Avg. F1: 47.2
Event-level Event@Avg. F1: 48.8
Train Epoch: 18 [0/10000 (0%)]	Loss: 0.311147
Train Epoch: 18 [800/10000 (8%)]	Loss: 0.285010
Train Epoch: 18 [1600/10000 (16%)]	Loss: 0.251368
Train Epoch: 18 [2400/10000 (24%)]	Loss: 0.269404
Train Epoch: 18 [3200/10000 (32%)]	Loss: 0.264187
Train Epoch: 18 [4000/10000 (40%)]	Loss: 0.262320
Train Epoch: 18 [4800/10000 (48%)]	Loss: 0.341193
Train Epoch: 18 [5600/10000 (56%)]	Loss: 0.254917
Train Epoch: 18 [6400/10000 (64%)]	Loss: 0.264162
Train Epoch: 18 [7200/10000 (72%)]	Loss: 0.247829
Train Epoch: 18 [8000/10000 (80%)]	Loss: 0.256691
Train Epoch: 18 [8800/10000 (88%)]	Loss: 0.239284
Train Epoch: 18 [9600/10000 (96%)]	Loss: 0.252174
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 61.0
Visual Event Detection Segment-level F1: 53.1
Audio-Visual Event Detection Segment-level F1: 48.3
Segment-levelType@Avg. F1: 54.1
Segment-level Event@Avg. F1: 56.6
Audio Event Detection Event-level F1: 51.4
Visual Event Detection Event-level F1: 49.2
Audio-Visual Event Detection Event-level F1: 41.6
Event-level Type@Avg. F1: 47.4
Event-level Event@Avg. F1: 48.9
Train Epoch: 19 [0/10000 (0%)]	Loss: 0.295690
Train Epoch: 19 [800/10000 (8%)]	Loss: 0.276724
Train Epoch: 19 [1600/10000 (16%)]	Loss: 0.284257
Train Epoch: 19 [2400/10000 (24%)]	Loss: 0.271550
Train Epoch: 19 [3200/10000 (32%)]	Loss: 0.255698
Train Epoch: 19 [4000/10000 (40%)]	Loss: 0.272457
Train Epoch: 19 [4800/10000 (48%)]	Loss: 0.282674
Train Epoch: 19 [5600/10000 (56%)]	Loss: 0.245311
Train Epoch: 19 [6400/10000 (64%)]	Loss: 0.234437
Train Epoch: 19 [7200/10000 (72%)]	Loss: 0.288026
Train Epoch: 19 [8000/10000 (80%)]	Loss: 0.307286
Train Epoch: 19 [8800/10000 (88%)]	Loss: 0.345697
Train Epoch: 19 [9600/10000 (96%)]	Loss: 0.261593
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.2
Visual Event Detection Segment-level F1: 54.3
Audio-Visual Event Detection Segment-level F1: 48.8
Segment-levelType@Avg. F1: 54.4
Segment-level Event@Avg. F1: 56.3
Audio Event Detection Event-level F1: 51.0
Visual Event Detection Event-level F1: 50.3
Audio-Visual Event Detection Event-level F1: 42.0
Event-level Type@Avg. F1: 47.8
Event-level Event@Avg. F1: 48.9
Train Epoch: 20 [0/10000 (0%)]	Loss: 0.251070
Train Epoch: 20 [800/10000 (8%)]	Loss: 0.272123
Train Epoch: 20 [1600/10000 (16%)]	Loss: 0.238941
Train Epoch: 20 [2400/10000 (24%)]	Loss: 0.241204
Train Epoch: 20 [3200/10000 (32%)]	Loss: 0.288807
Train Epoch: 20 [4000/10000 (40%)]	Loss: 0.223892
Train Epoch: 20 [4800/10000 (48%)]	Loss: 0.267293
Train Epoch: 20 [5600/10000 (56%)]	Loss: 0.260597
Train Epoch: 20 [6400/10000 (64%)]	Loss: 0.254843
Train Epoch: 20 [7200/10000 (72%)]	Loss: 0.259277
Train Epoch: 20 [8000/10000 (80%)]	Loss: 0.260598
Train Epoch: 20 [8800/10000 (88%)]	Loss: 0.253911
Train Epoch: 20 [9600/10000 (96%)]	Loss: 0.259352
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.4
Visual Event Detection Segment-level F1: 52.2
Audio-Visual Event Detection Segment-level F1: 47.4
Segment-levelType@Avg. F1: 53.3
Segment-level Event@Avg. F1: 55.9
Audio Event Detection Event-level F1: 50.6
Visual Event Detection Event-level F1: 48.1
Audio-Visual Event Detection Event-level F1: 40.6
Event-level Type@Avg. F1: 46.4
Event-level Event@Avg. F1: 48.1
Train Epoch: 21 [0/10000 (0%)]	Loss: 0.264922
Train Epoch: 21 [800/10000 (8%)]	Loss: 0.228305
Train Epoch: 21 [1600/10000 (16%)]	Loss: 0.248999
Train Epoch: 21 [2400/10000 (24%)]	Loss: 0.225537
Train Epoch: 21 [3200/10000 (32%)]	Loss: 0.226744
Train Epoch: 21 [4000/10000 (40%)]	Loss: 0.266616
Train Epoch: 21 [4800/10000 (48%)]	Loss: 0.246266
Train Epoch: 21 [5600/10000 (56%)]	Loss: 0.241320
Train Epoch: 21 [6400/10000 (64%)]	Loss: 0.266291
Train Epoch: 21 [7200/10000 (72%)]	Loss: 0.257477
Train Epoch: 21 [8000/10000 (80%)]	Loss: 0.283316
Train Epoch: 21 [8800/10000 (88%)]	Loss: 0.232058
Train Epoch: 21 [9600/10000 (96%)]	Loss: 0.294024
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.6
Visual Event Detection Segment-level F1: 53.8
Audio-Visual Event Detection Segment-level F1: 48.4
Segment-levelType@Avg. F1: 54.3
Segment-level Event@Avg. F1: 56.6
Audio Event Detection Event-level F1: 51.1
Visual Event Detection Event-level F1: 49.8
Audio-Visual Event Detection Event-level F1: 41.6
Event-level Type@Avg. F1: 47.5
Event-level Event@Avg. F1: 48.9
Train Epoch: 22 [0/10000 (0%)]	Loss: 0.285726
Train Epoch: 22 [800/10000 (8%)]	Loss: 0.230443
Train Epoch: 22 [1600/10000 (16%)]	Loss: 0.232572
Train Epoch: 22 [2400/10000 (24%)]	Loss: 0.268054
Train Epoch: 22 [3200/10000 (32%)]	Loss: 0.285083
Train Epoch: 22 [4000/10000 (40%)]	Loss: 0.244623
Train Epoch: 22 [4800/10000 (48%)]	Loss: 0.250516
Train Epoch: 22 [5600/10000 (56%)]	Loss: 0.255772
Train Epoch: 22 [6400/10000 (64%)]	Loss: 0.253880
Train Epoch: 22 [7200/10000 (72%)]	Loss: 0.239608
Train Epoch: 22 [8000/10000 (80%)]	Loss: 0.308909
Train Epoch: 22 [8800/10000 (88%)]	Loss: 0.278059
Train Epoch: 22 [9600/10000 (96%)]	Loss: 0.270320
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.5
Visual Event Detection Segment-level F1: 54.0
Audio-Visual Event Detection Segment-level F1: 48.9
Segment-levelType@Avg. F1: 54.5
Segment-level Event@Avg. F1: 56.3
Audio Event Detection Event-level F1: 51.0
Visual Event Detection Event-level F1: 50.0
Audio-Visual Event Detection Event-level F1: 42.1
Event-level Type@Avg. F1: 47.7
Event-level Event@Avg. F1: 48.7
Train Epoch: 23 [0/10000 (0%)]	Loss: 0.247610
Train Epoch: 23 [800/10000 (8%)]	Loss: 0.242622
Train Epoch: 23 [1600/10000 (16%)]	Loss: 0.257615
Train Epoch: 23 [2400/10000 (24%)]	Loss: 0.239090
Train Epoch: 23 [3200/10000 (32%)]	Loss: 0.258023
Train Epoch: 23 [4000/10000 (40%)]	Loss: 0.285068
Train Epoch: 23 [4800/10000 (48%)]	Loss: 0.249520
Train Epoch: 23 [5600/10000 (56%)]	Loss: 0.222272
Train Epoch: 23 [6400/10000 (64%)]	Loss: 0.267862
Train Epoch: 23 [7200/10000 (72%)]	Loss: 0.252292
Train Epoch: 23 [8000/10000 (80%)]	Loss: 0.271848
Train Epoch: 23 [8800/10000 (88%)]	Loss: 0.269002
Train Epoch: 23 [9600/10000 (96%)]	Loss: 0.287503
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.4
Visual Event Detection Segment-level F1: 54.1
Audio-Visual Event Detection Segment-level F1: 48.9
Segment-levelType@Avg. F1: 54.5
Segment-level Event@Avg. F1: 56.4
Audio Event Detection Event-level F1: 51.1
Visual Event Detection Event-level F1: 50.1
Audio-Visual Event Detection Event-level F1: 42.0
Event-level Type@Avg. F1: 47.7
Event-level Event@Avg. F1: 48.9
Train Epoch: 24 [0/10000 (0%)]	Loss: 0.225238
Train Epoch: 24 [800/10000 (8%)]	Loss: 0.254317
Train Epoch: 24 [1600/10000 (16%)]	Loss: 0.299199
Train Epoch: 24 [2400/10000 (24%)]	Loss: 0.249087
Train Epoch: 24 [3200/10000 (32%)]	Loss: 0.244721
Train Epoch: 24 [4000/10000 (40%)]	Loss: 0.283973
Train Epoch: 24 [4800/10000 (48%)]	Loss: 0.248507
Train Epoch: 24 [5600/10000 (56%)]	Loss: 0.248716
Train Epoch: 24 [6400/10000 (64%)]	Loss: 0.240651
Train Epoch: 24 [7200/10000 (72%)]	Loss: 0.243787
Train Epoch: 24 [8000/10000 (80%)]	Loss: 0.271792
Train Epoch: 24 [8800/10000 (88%)]	Loss: 0.301565
Train Epoch: 24 [9600/10000 (96%)]	Loss: 0.236442
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.6
Visual Event Detection Segment-level F1: 53.8
Audio-Visual Event Detection Segment-level F1: 48.7
Segment-levelType@Avg. F1: 54.3
Segment-level Event@Avg. F1: 56.4
Audio Event Detection Event-level F1: 51.0
Visual Event Detection Event-level F1: 49.7
Audio-Visual Event Detection Event-level F1: 41.8
Event-level Type@Avg. F1: 47.5
Event-level Event@Avg. F1: 48.7
Train Epoch: 25 [0/10000 (0%)]	Loss: 0.285176
Train Epoch: 25 [800/10000 (8%)]	Loss: 0.266790
Train Epoch: 25 [1600/10000 (16%)]	Loss: 0.275315
Train Epoch: 25 [2400/10000 (24%)]	Loss: 0.274616
Train Epoch: 25 [3200/10000 (32%)]	Loss: 0.237575
Train Epoch: 25 [4000/10000 (40%)]	Loss: 0.276564
Train Epoch: 25 [4800/10000 (48%)]	Loss: 0.257495
Train Epoch: 25 [5600/10000 (56%)]	Loss: 0.312684
Train Epoch: 25 [6400/10000 (64%)]	Loss: 0.231061
Train Epoch: 25 [7200/10000 (72%)]	Loss: 0.306415
Train Epoch: 25 [8000/10000 (80%)]	Loss: 0.260924
Train Epoch: 25 [8800/10000 (88%)]	Loss: 0.289423
Train Epoch: 25 [9600/10000 (96%)]	Loss: 0.268445
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.8
Visual Event Detection Segment-level F1: 53.5
Audio-Visual Event Detection Segment-level F1: 48.5
Segment-levelType@Avg. F1: 54.2
Segment-level Event@Avg. F1: 56.5
Audio Event Detection Event-level F1: 51.2
Visual Event Detection Event-level F1: 49.4
Audio-Visual Event Detection Event-level F1: 41.6
Event-level Type@Avg. F1: 47.4
Event-level Event@Avg. F1: 48.8
Train Epoch: 26 [0/10000 (0%)]	Loss: 0.240330
Train Epoch: 26 [800/10000 (8%)]	Loss: 0.336876
Train Epoch: 26 [1600/10000 (16%)]	Loss: 0.238171
Train Epoch: 26 [2400/10000 (24%)]	Loss: 0.243519
Train Epoch: 26 [3200/10000 (32%)]	Loss: 0.243396
Train Epoch: 26 [4000/10000 (40%)]	Loss: 0.277116
Train Epoch: 26 [4800/10000 (48%)]	Loss: 0.257840
Train Epoch: 26 [5600/10000 (56%)]	Loss: 0.258153
Train Epoch: 26 [6400/10000 (64%)]	Loss: 0.265641
Train Epoch: 26 [7200/10000 (72%)]	Loss: 0.235686
Train Epoch: 26 [8000/10000 (80%)]	Loss: 0.256351
Train Epoch: 26 [8800/10000 (88%)]	Loss: 0.275736
Train Epoch: 26 [9600/10000 (96%)]	Loss: 0.251498
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.7
Visual Event Detection Segment-level F1: 53.8
Audio-Visual Event Detection Segment-level F1: 48.4
Segment-levelType@Avg. F1: 54.3
Segment-level Event@Avg. F1: 56.5
Audio Event Detection Event-level F1: 51.1
Visual Event Detection Event-level F1: 49.7
Audio-Visual Event Detection Event-level F1: 41.6
Event-level Type@Avg. F1: 47.5
Event-level Event@Avg. F1: 48.7
Train Epoch: 27 [0/10000 (0%)]	Loss: 0.248062
Train Epoch: 27 [800/10000 (8%)]	Loss: 0.334451
Train Epoch: 27 [1600/10000 (16%)]	Loss: 0.246148
Train Epoch: 27 [2400/10000 (24%)]	Loss: 0.259243
Train Epoch: 27 [3200/10000 (32%)]	Loss: 0.274854
Train Epoch: 27 [4000/10000 (40%)]	Loss: 0.257116
Train Epoch: 27 [4800/10000 (48%)]	Loss: 0.284134
Train Epoch: 27 [5600/10000 (56%)]	Loss: 0.264653
Train Epoch: 27 [6400/10000 (64%)]	Loss: 0.279519
Train Epoch: 27 [7200/10000 (72%)]	Loss: 0.234982
Train Epoch: 27 [8000/10000 (80%)]	Loss: 0.273871
Train Epoch: 27 [8800/10000 (88%)]	Loss: 0.241648
Train Epoch: 27 [9600/10000 (96%)]	Loss: 0.251378
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.6
Visual Event Detection Segment-level F1: 54.0
Audio-Visual Event Detection Segment-level F1: 49.1
Segment-levelType@Avg. F1: 54.6
Segment-level Event@Avg. F1: 56.4
Audio Event Detection Event-level F1: 51.1
Visual Event Detection Event-level F1: 49.9
Audio-Visual Event Detection Event-level F1: 42.3
Event-level Type@Avg. F1: 47.7
Event-level Event@Avg. F1: 48.8
Train Epoch: 28 [0/10000 (0%)]	Loss: 0.273735
Train Epoch: 28 [800/10000 (8%)]	Loss: 0.288396
Train Epoch: 28 [1600/10000 (16%)]	Loss: 0.272636
Train Epoch: 28 [2400/10000 (24%)]	Loss: 0.267524
Train Epoch: 28 [3200/10000 (32%)]	Loss: 0.232834
Train Epoch: 28 [4000/10000 (40%)]	Loss: 0.274434
Train Epoch: 28 [4800/10000 (48%)]	Loss: 0.305685
Train Epoch: 28 [5600/10000 (56%)]	Loss: 0.225325
Train Epoch: 28 [6400/10000 (64%)]	Loss: 0.274497
Train Epoch: 28 [7200/10000 (72%)]	Loss: 0.279454
Train Epoch: 28 [8000/10000 (80%)]	Loss: 0.243489
Train Epoch: 28 [8800/10000 (88%)]	Loss: 0.242866
Train Epoch: 28 [9600/10000 (96%)]	Loss: 0.241066
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.4
Visual Event Detection Segment-level F1: 53.7
Audio-Visual Event Detection Segment-level F1: 48.9
Segment-levelType@Avg. F1: 54.3
Segment-level Event@Avg. F1: 56.3
Audio Event Detection Event-level F1: 50.9
Visual Event Detection Event-level F1: 49.6
Audio-Visual Event Detection Event-level F1: 42.0
Event-level Type@Avg. F1: 47.5
Event-level Event@Avg. F1: 48.6
Train Epoch: 29 [0/10000 (0%)]	Loss: 0.251385
Train Epoch: 29 [800/10000 (8%)]	Loss: 0.271989
Train Epoch: 29 [1600/10000 (16%)]	Loss: 0.243958
Train Epoch: 29 [2400/10000 (24%)]	Loss: 0.216800
Train Epoch: 29 [3200/10000 (32%)]	Loss: 0.227364
Train Epoch: 29 [4000/10000 (40%)]	Loss: 0.236615
Train Epoch: 29 [4800/10000 (48%)]	Loss: 0.250077
Train Epoch: 29 [5600/10000 (56%)]	Loss: 0.312910
Train Epoch: 29 [6400/10000 (64%)]	Loss: 0.248318
Train Epoch: 29 [7200/10000 (72%)]	Loss: 0.224265
Train Epoch: 29 [8000/10000 (80%)]	Loss: 0.281116
Train Epoch: 29 [8800/10000 (88%)]	Loss: 0.258631
Train Epoch: 29 [9600/10000 (96%)]	Loss: 0.314470
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.4
Visual Event Detection Segment-level F1: 54.1
Audio-Visual Event Detection Segment-level F1: 48.9
Segment-levelType@Avg. F1: 54.5
Segment-level Event@Avg. F1: 56.4
Audio Event Detection Event-level F1: 51.0
Visual Event Detection Event-level F1: 50.0
Audio-Visual Event Detection Event-level F1: 42.0
Event-level Type@Avg. F1: 47.7
Event-level Event@Avg. F1: 48.7
Train Epoch: 30 [0/10000 (0%)]	Loss: 0.249147
Train Epoch: 30 [800/10000 (8%)]	Loss: 0.248652
Train Epoch: 30 [1600/10000 (16%)]	Loss: 0.225143
Train Epoch: 30 [2400/10000 (24%)]	Loss: 0.244932
Train Epoch: 30 [3200/10000 (32%)]	Loss: 0.245407
Train Epoch: 30 [4000/10000 (40%)]	Loss: 0.271368
Train Epoch: 30 [4800/10000 (48%)]	Loss: 0.234775
Train Epoch: 30 [5600/10000 (56%)]	Loss: 0.223522
Train Epoch: 30 [6400/10000 (64%)]	Loss: 0.250023
Train Epoch: 30 [7200/10000 (72%)]	Loss: 0.299612
Train Epoch: 30 [8000/10000 (80%)]	Loss: 0.232311
Train Epoch: 30 [8800/10000 (88%)]	Loss: 0.288294
Train Epoch: 30 [9600/10000 (96%)]	Loss: 0.266925
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 61.0
Visual Event Detection Segment-level F1: 54.0
Audio-Visual Event Detection Segment-level F1: 48.6
Segment-levelType@Avg. F1: 54.5
Segment-level Event@Avg. F1: 56.8
Audio Event Detection Event-level F1: 51.3
Visual Event Detection Event-level F1: 49.8
Audio-Visual Event Detection Event-level F1: 41.7
Event-level Type@Avg. F1: 47.6
Event-level Event@Avg. F1: 48.9
Train Epoch: 31 [0/10000 (0%)]	Loss: 0.253989
Train Epoch: 31 [800/10000 (8%)]	Loss: 0.310958
Train Epoch: 31 [1600/10000 (16%)]	Loss: 0.249993
Train Epoch: 31 [2400/10000 (24%)]	Loss: 0.272759
Train Epoch: 31 [3200/10000 (32%)]	Loss: 0.267781
Train Epoch: 31 [4000/10000 (40%)]	Loss: 0.242486
Train Epoch: 31 [4800/10000 (48%)]	Loss: 0.227562
Train Epoch: 31 [5600/10000 (56%)]	Loss: 0.269007
Train Epoch: 31 [6400/10000 (64%)]	Loss: 0.262909
Train Epoch: 31 [7200/10000 (72%)]	Loss: 0.283207
Train Epoch: 31 [8000/10000 (80%)]	Loss: 0.232907
Train Epoch: 31 [8800/10000 (88%)]	Loss: 0.320899
Train Epoch: 31 [9600/10000 (96%)]	Loss: 0.299045
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.8
Visual Event Detection Segment-level F1: 54.1
Audio-Visual Event Detection Segment-level F1: 48.7
Segment-levelType@Avg. F1: 54.5
Segment-level Event@Avg. F1: 56.7
Audio Event Detection Event-level F1: 51.2
Visual Event Detection Event-level F1: 50.0
Audio-Visual Event Detection Event-level F1: 41.8
Event-level Type@Avg. F1: 47.7
Event-level Event@Avg. F1: 49.0
Train Epoch: 32 [0/10000 (0%)]	Loss: 0.263844
Train Epoch: 32 [800/10000 (8%)]	Loss: 0.277156
Train Epoch: 32 [1600/10000 (16%)]	Loss: 0.283505
Train Epoch: 32 [2400/10000 (24%)]	Loss: 0.245657
Train Epoch: 32 [3200/10000 (32%)]	Loss: 0.236672
Train Epoch: 32 [4000/10000 (40%)]	Loss: 0.227185
Train Epoch: 32 [4800/10000 (48%)]	Loss: 0.253383
Train Epoch: 32 [5600/10000 (56%)]	Loss: 0.249683
Train Epoch: 32 [6400/10000 (64%)]	Loss: 0.228164
Train Epoch: 32 [7200/10000 (72%)]	Loss: 0.230253
Train Epoch: 32 [8000/10000 (80%)]	Loss: 0.267614
Train Epoch: 32 [8800/10000 (88%)]	Loss: 0.240064
Train Epoch: 32 [9600/10000 (96%)]	Loss: 0.280430
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.6
Visual Event Detection Segment-level F1: 54.1
Audio-Visual Event Detection Segment-level F1: 48.7
Segment-levelType@Avg. F1: 54.5
Segment-level Event@Avg. F1: 56.6
Audio Event Detection Event-level F1: 51.1
Visual Event Detection Event-level F1: 50.0
Audio-Visual Event Detection Event-level F1: 41.8
Event-level Type@Avg. F1: 47.6
Event-level Event@Avg. F1: 48.9
Train Epoch: 33 [0/10000 (0%)]	Loss: 0.292484
Train Epoch: 33 [800/10000 (8%)]	Loss: 0.229526
Train Epoch: 33 [1600/10000 (16%)]	Loss: 0.301079
Train Epoch: 33 [2400/10000 (24%)]	Loss: 0.325541
Train Epoch: 33 [3200/10000 (32%)]	Loss: 0.242386
Train Epoch: 33 [4000/10000 (40%)]	Loss: 0.250917
Train Epoch: 33 [4800/10000 (48%)]	Loss: 0.232247
Train Epoch: 33 [5600/10000 (56%)]	Loss: 0.264950
Train Epoch: 33 [6400/10000 (64%)]	Loss: 0.252689
Train Epoch: 33 [7200/10000 (72%)]	Loss: 0.243772
Train Epoch: 33 [8000/10000 (80%)]	Loss: 0.258627
Train Epoch: 33 [8800/10000 (88%)]	Loss: 0.266140
Train Epoch: 33 [9600/10000 (96%)]	Loss: 0.302344
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.5
Visual Event Detection Segment-level F1: 54.1
Audio-Visual Event Detection Segment-level F1: 48.7
Segment-levelType@Avg. F1: 54.5
Segment-level Event@Avg. F1: 56.5
Audio Event Detection Event-level F1: 51.0
Visual Event Detection Event-level F1: 50.0
Audio-Visual Event Detection Event-level F1: 41.9
Event-level Type@Avg. F1: 47.6
Event-level Event@Avg. F1: 48.8
Train Epoch: 34 [0/10000 (0%)]	Loss: 0.269278
Train Epoch: 34 [800/10000 (8%)]	Loss: 0.324790
Train Epoch: 34 [1600/10000 (16%)]	Loss: 0.220929
Train Epoch: 34 [2400/10000 (24%)]	Loss: 0.291722
Train Epoch: 34 [3200/10000 (32%)]	Loss: 0.233289
Train Epoch: 34 [4000/10000 (40%)]	Loss: 0.243270
Train Epoch: 34 [4800/10000 (48%)]	Loss: 0.271899
Train Epoch: 34 [5600/10000 (56%)]	Loss: 0.240959
Train Epoch: 34 [6400/10000 (64%)]	Loss: 0.259900
Train Epoch: 34 [7200/10000 (72%)]	Loss: 0.265039
Train Epoch: 34 [8000/10000 (80%)]	Loss: 0.246895
Train Epoch: 34 [8800/10000 (88%)]	Loss: 0.248800
Train Epoch: 34 [9600/10000 (96%)]	Loss: 0.297906
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.6
Visual Event Detection Segment-level F1: 53.9
Audio-Visual Event Detection Segment-level F1: 48.8
Segment-levelType@Avg. F1: 54.4
Segment-level Event@Avg. F1: 56.4
Audio Event Detection Event-level F1: 51.1
Visual Event Detection Event-level F1: 49.8
Audio-Visual Event Detection Event-level F1: 42.0
Event-level Type@Avg. F1: 47.6
Event-level Event@Avg. F1: 48.8
Train Epoch: 35 [0/10000 (0%)]	Loss: 0.256494
Train Epoch: 35 [800/10000 (8%)]	Loss: 0.243970
Train Epoch: 35 [1600/10000 (16%)]	Loss: 0.267858
Train Epoch: 35 [2400/10000 (24%)]	Loss: 0.254018
Train Epoch: 35 [3200/10000 (32%)]	Loss: 0.240733
Train Epoch: 35 [4000/10000 (40%)]	Loss: 0.265640
Train Epoch: 35 [4800/10000 (48%)]	Loss: 0.258955
Train Epoch: 35 [5600/10000 (56%)]	Loss: 0.271495
Train Epoch: 35 [6400/10000 (64%)]	Loss: 0.268756
Train Epoch: 35 [7200/10000 (72%)]	Loss: 0.256483
Train Epoch: 35 [8000/10000 (80%)]	Loss: 0.236653
Train Epoch: 35 [8800/10000 (88%)]	Loss: 0.259113
Train Epoch: 35 [9600/10000 (96%)]	Loss: 0.233205
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.6
Visual Event Detection Segment-level F1: 53.8
Audio-Visual Event Detection Segment-level F1: 48.8
Segment-levelType@Avg. F1: 54.4
Segment-level Event@Avg. F1: 56.5
Audio Event Detection Event-level F1: 51.1
Visual Event Detection Event-level F1: 49.7
Audio-Visual Event Detection Event-level F1: 41.9
Event-level Type@Avg. F1: 47.6
Event-level Event@Avg. F1: 48.8
Train Epoch: 36 [0/10000 (0%)]	Loss: 0.245695
Train Epoch: 36 [800/10000 (8%)]	Loss: 0.287912
Train Epoch: 36 [1600/10000 (16%)]	Loss: 0.251559
Train Epoch: 36 [2400/10000 (24%)]	Loss: 0.276085
Train Epoch: 36 [3200/10000 (32%)]	Loss: 0.293212
Train Epoch: 36 [4000/10000 (40%)]	Loss: 0.250027
Train Epoch: 36 [4800/10000 (48%)]	Loss: 0.297570
Train Epoch: 36 [5600/10000 (56%)]	Loss: 0.258858
Train Epoch: 36 [6400/10000 (64%)]	Loss: 0.236225
Train Epoch: 36 [7200/10000 (72%)]	Loss: 0.257013
Train Epoch: 36 [8000/10000 (80%)]	Loss: 0.241231
Train Epoch: 36 [8800/10000 (88%)]	Loss: 0.264055
Train Epoch: 36 [9600/10000 (96%)]	Loss: 0.243262
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.6
Visual Event Detection Segment-level F1: 53.9
Audio-Visual Event Detection Segment-level F1: 48.8
Segment-levelType@Avg. F1: 54.4
Segment-level Event@Avg. F1: 56.5
Audio Event Detection Event-level F1: 51.1
Visual Event Detection Event-level F1: 49.8
Audio-Visual Event Detection Event-level F1: 42.0
Event-level Type@Avg. F1: 47.6
Event-level Event@Avg. F1: 48.8
Train Epoch: 37 [0/10000 (0%)]	Loss: 0.245977
Train Epoch: 37 [800/10000 (8%)]	Loss: 0.283446
Train Epoch: 37 [1600/10000 (16%)]	Loss: 0.259204
Train Epoch: 37 [2400/10000 (24%)]	Loss: 0.303432
Train Epoch: 37 [3200/10000 (32%)]	Loss: 0.251512
Train Epoch: 37 [4000/10000 (40%)]	Loss: 0.277186
Train Epoch: 37 [4800/10000 (48%)]	Loss: 0.287139
Train Epoch: 37 [5600/10000 (56%)]	Loss: 0.248906
Train Epoch: 37 [6400/10000 (64%)]	Loss: 0.271181
Train Epoch: 37 [7200/10000 (72%)]	Loss: 0.260631
Train Epoch: 37 [8000/10000 (80%)]	Loss: 0.247358
Train Epoch: 37 [8800/10000 (88%)]	Loss: 0.246463
Train Epoch: 37 [9600/10000 (96%)]	Loss: 0.244205
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.5
Visual Event Detection Segment-level F1: 53.9
Audio-Visual Event Detection Segment-level F1: 48.9
Segment-levelType@Avg. F1: 54.4
Segment-level Event@Avg. F1: 56.4
Audio Event Detection Event-level F1: 50.9
Visual Event Detection Event-level F1: 49.8
Audio-Visual Event Detection Event-level F1: 42.0
Event-level Type@Avg. F1: 47.6
Event-level Event@Avg. F1: 48.7
Train Epoch: 38 [0/10000 (0%)]	Loss: 0.239294
Train Epoch: 38 [800/10000 (8%)]	Loss: 0.245638
Train Epoch: 38 [1600/10000 (16%)]	Loss: 0.284108
Train Epoch: 38 [2400/10000 (24%)]	Loss: 0.254064
Train Epoch: 38 [3200/10000 (32%)]	Loss: 0.273664
Train Epoch: 38 [4000/10000 (40%)]	Loss: 0.290342
Train Epoch: 38 [4800/10000 (48%)]	Loss: 0.285157
Train Epoch: 38 [5600/10000 (56%)]	Loss: 0.243955
Train Epoch: 38 [6400/10000 (64%)]	Loss: 0.245849
Train Epoch: 38 [7200/10000 (72%)]	Loss: 0.246460
Train Epoch: 38 [8000/10000 (80%)]	Loss: 0.287722
Train Epoch: 38 [8800/10000 (88%)]	Loss: 0.279437
Train Epoch: 38 [9600/10000 (96%)]	Loss: 0.235677
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 60.5
Visual Event Detection Segment-level F1: 53.9
Audio-Visual Event Detection Segment-level F1: 48.8
Segment-levelType@Avg. F1: 54.4
Segment-level Event@Avg. F1: 56.4
Audio Event Detection Event-level F1: 51.0
Visual Event Detection Event-level F1: 49.8
Audio-Visual Event Detection Event-level F1: 41.9
Event-level Type@Avg. F1: 47.6
Event-level Event@Avg. F1: 48.8
Train Epoch: 39 [0/10000 (0%)]	Loss: 0.231217
Train Epoch: 39 [800/10000 (8%)]	Loss: 0.289687
Train Epoch: 39 [1600/10000 (16%)]	Loss: 0.299063
Train Epoch: 39 [2400/10000 (24%)]	Loss: 0.248692
Train Epoch: 39 [3200/10000 (32%)]	Loss: 0.277692
Train Epoch: 39 [4000/10000 (40%)]	Loss: 0.252647
Train Epoch: 39 [4800/10000 (48%)]	Loss: 0.329465
Train Epoch: 39 [5600/10000 (56%)]	Loss: 0.214136
Train Epoch: 39 [6400/10000 (64%)]	Loss: 0.258705
Train Epoch: 39 [7200/10000 (72%)]	Loss: 0.269110
Traceback (most recent call last):
  File "/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py", line 241, in <module>
    main()
  File "/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py", line 221, in main
    train(args, model, train_loader, optimizer, criterion, epoch=epoch)
  File "/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py", line 33, in train
    loss.backward()
  File "/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/_tensor.py", line 492, in backward
    torch.autograd.backward(
  File "/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/autograd/__init__.py", line 251, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
RuntimeError: CUDA error: CUBLAS_STATUS_EXECUTION_FAILED when calling `cublasSgemm( handle, opa, opb, m, n, k, &alpha, a, lda, b, ldb, &beta, c, ldc)`
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [32,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [33,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [34,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [35,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [36,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [37,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [38,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [39,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [40,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [41,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [42,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [43,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [44,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [45,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [46,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [47,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [48,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [49,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [50,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [51,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [52,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [53,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [54,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [55,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [56,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [57,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [58,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [59,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [60,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [61,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [62,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [63,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [64,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [65,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [66,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [67,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [68,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [69,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [70,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [71,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [72,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [73,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [74,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [75,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [76,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [77,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [78,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [79,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [80,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [81,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [82,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [83,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [84,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [85,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [86,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [87,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [88,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [89,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [90,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [91,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [92,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [93,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [94,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [95,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [96,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [97,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [98,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [99,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [100,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [101,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [102,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [103,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [104,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [105,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [106,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [107,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [108,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [109,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [110,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [111,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [112,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [113,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [114,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [115,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [116,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [117,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [118,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [119,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [120,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [121,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [122,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [123,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [124,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [125,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [126,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [127,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [0,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [1,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [2,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [3,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [4,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [5,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [6,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [7,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [8,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [9,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [10,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [11,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [12,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [13,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [14,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [15,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [16,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [17,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [18,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [19,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [20,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [21,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [22,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [23,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [24,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [25,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [26,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [27,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [28,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [29,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [30,0,0] Assertion `input_val >= zero && input_val <= one` failed.
../aten/src/ATen/native/cuda/Loss.cu:94: operator(): block: [0,0,0], thread: [31,0,0] Assertion `input_val >= zero && input_val <= one` failed.

[KeOps] error: cuMemFree(buffer) failed with error CUDA_ERROR_ASSERT

CUDA extension for cauchy multiplication not found. Install by going to extensions/cauchy/ and running `python setup.py install`. This should speed up end-to-end training by 10-50%
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/modules/transformer.py:282: UserWarning: enable_nested_tensor is True, but self.use_nested_tensor is False because encoder_layer.self_attn.batch_first was not True(use batch_first for better inference performance)
  warnings.warn(f"enable_nested_tensor is True, but self.use_nested_tensor is False because {why_not_sparsity_fast_path}")
/people/cs/w/wxz220013/anaconda3/envs/llp/lib/python3.10/site-packages/torch/nn/functional.py:1352: UserWarning: dropout2d: Received a 3D input to dropout2d and assuming that channel-wise 1D dropout behavior is desired - input is interpreted as shape (N, C, L), where C is the channel dim. This behavior will change in a future release to interpret the input as one without a batch dimension, i.e. shape (C, H, W). To maintain the 1D channel-wise dropout behavior, please switch to using dropout1d instead.
  warnings.warn("dropout2d: Received a 3D input to dropout2d and assuming that channel-wise "
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:84: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_a = df_a.loc[df_a['filename'] == df.iloc[batch_idx, :][0]]
/people/cs/w/wxz220013/AVVP-ECCV20/main_avvp.py:100: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  df_vid_v = df_v.loc[df_v['filename'] == df.iloc[batch_idx, :][0]]
Audio Event Detection Segment-level F1: 58.5
Visual Event Detection Segment-level F1: 53.8
Audio-Visual Event Detection Segment-level F1: 48.7
Segment-levelType@Avg. F1: 53.7
Segment-level Event@Avg. F1: 54.9
Audio Event Detection Event-level F1: 49.5
Visual Event Detection Event-level F1: 50.2
Audio-Visual Event Detection Event-level F1: 42.3
Event-level Type@Avg. F1: 47.4
Event-level Event@Avg. F1: 47.8
